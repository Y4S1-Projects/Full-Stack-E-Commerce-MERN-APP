const webpack = require('webpack');
const TerserPlugin = require('terser-webpack-plugin');

module.exports = function override(config, env) {
  // Security configurations for both development and production

  // Disable source maps in all environments to prevent IP disclosure
  if (env === 'development') {
    // For development: forcefully disable all source maps
    config.devtool = false;

    // Force disable source map generation by overriding the plugin
    const plugins = config.plugins || [];
    config.plugins = plugins.filter((plugin) => {
      return !(plugin && plugin.constructor && plugin.constructor.name === 'SourceMapDevToolPlugin');
    });

    // Ensure no source maps are generated by any means
    if (config.module && config.module.rules) {
      config.module.rules.forEach((rule) => {
        if (rule.use && Array.isArray(rule.use)) {
          rule.use.forEach((use) => {
            if (use.options && use.options.sourceMap !== undefined) {
              use.options.sourceMap = false;
            }
          });
        }
      });
    }

    // Add security headers and configurations for dev server
    config.devServer = {
      ...config.devServer,
      // Disable host checking to prevent IP-based access logging
      disableHostCheck: false,
      // Use only localhost
      host: 'localhost',
      // Disable public access
      public: false,
      // Disable overlay with source locations
      overlay: {
        warnings: false,
        errors: true,
      },
    };
  }

  // Production optimizations to prevent IP disclosure
  if (env === 'production') {
    // Remove source maps entirely
    config.devtool = false;

    // Enhanced optimization
    config.optimization = {
      ...config.optimization,
      minimize: true,
      minimizer: [
        // Custom Terser configuration
        new TerserPlugin({
          terserOptions: {
            compress: {
              // Remove console statements
              drop_console: true,
              drop_debugger: true,
              // Remove unused code
              unused: true,
              // Remove dead code
              dead_code: true,
            },
            mangle: {
              // Mangle variable names for obfuscation
              toplevel: true,
            },
            format: {
              // Remove all comments
              comments: false,
            },
          },
          // Don't extract comments to separate file
          extractComments: false,
        }),
      ],
    };

    // Define environment variables securely
    config.plugins.push(
      new webpack.DefinePlugin({
        'process.env': {
          NODE_ENV: JSON.stringify('production'),
          REACT_APP_API_BASE: JSON.stringify(process.env.REACT_APP_API_BASE || process.env.REACT_APP_API_URL || '/api'),
          GENERATE_SOURCEMAP: JSON.stringify('false'),
        },
      })
    );

    // Remove webpack BannerPlugin if present (can leak metadata)
    config.plugins = config.plugins.filter((plugin) => !(plugin instanceof webpack.BannerPlugin));
  }

  return config;
};
